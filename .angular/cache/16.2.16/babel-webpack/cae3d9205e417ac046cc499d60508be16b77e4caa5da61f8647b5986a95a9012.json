{"ast":null,"code":"import _asyncToGenerator from \"D:/guru_prep/port/perplexity/shainy-portfolio-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { from } from 'rxjs';\nimport emailjs from 'emailjs-com';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ContactService {\n  constructor(http) {\n    this.http = http;\n    this.EMAIL_SERVICE_ID = environment.emailjs.serviceId;\n    this.EMAIL_TEMPLATE_ID = environment.emailjs.templateId;\n    this.EMAIL_PUBLIC_KEY = environment.emailjs.publicKey;\n    this.initializeEmailJS();\n  }\n  initializeEmailJS() {\n    try {\n      emailjs.init(this.EMAIL_PUBLIC_KEY);\n      console.log('‚úÖ EmailJS initialized successfully');\n    } catch (error) {\n      console.error('‚ùå EmailJS initialization failed:', error);\n    }\n  }\n  sendEmail(formData) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // ‚úÖ FIXED - Proper template parameters\n        const templateParams = {\n          from_name: formData.name,\n          from_email: formData.email,\n          subject: formData.subject,\n          message: formData.message,\n          reply_to: formData.email,\n          to_email: 'shainyvpoojari@gmail.com',\n          to_name: 'Shainy V Poojari' // ‚úÖ Your name\n        };\n\n        console.log('üìß Sending email with fixed template params:', templateParams);\n        console.log('üìß Service ID:', _this.EMAIL_SERVICE_ID);\n        console.log('üìß Template ID:', _this.EMAIL_TEMPLATE_ID);\n        const response = yield emailjs.send(_this.EMAIL_SERVICE_ID, _this.EMAIL_TEMPLATE_ID, templateParams, _this.EMAIL_PUBLIC_KEY);\n        console.log('‚úÖ Email sent successfully:', response);\n        return response;\n      } catch (error) {\n        console.error('‚ùå EmailJS Error:', error);\n        throw error;\n      }\n    })();\n  }\n  sendEmailObservable(formData) {\n    return from(this.sendEmail(formData));\n  }\n  validateEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n  getContactInfo() {\n    return {\n      name: 'Shainy V Poojari',\n      title: 'Senior Frontend Engineer',\n      email: 'shainyvpoojari@gmail.com',\n      location: 'Bangalore, India',\n      responseTime: 'Within 24 hours'\n    };\n  }\n  static {\n    this.…µfac = function ContactService_Factory(t) {\n      return new (t || ContactService)(i0.…µ…µinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.…µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n      token: ContactService,\n      factory: ContactService.…µfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["from","emailjs","environment","ContactService","constructor","http","EMAIL_SERVICE_ID","serviceId","EMAIL_TEMPLATE_ID","templateId","EMAIL_PUBLIC_KEY","publicKey","initializeEmailJS","init","console","log","error","sendEmail","formData","_this","_asyncToGenerator","templateParams","from_name","name","from_email","email","subject","message","reply_to","to_email","to_name","response","send","sendEmailObservable","validateEmail","emailRegex","test","getContactInfo","title","location","responseTime","i0","…µ…µinject","i1","HttpClient","factory","…µfac","providedIn"],"sources":["D:\\guru_prep\\port\\perplexity\\shainy-portfolio-angular\\src\\app\\core\\services\\contact.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, from } from 'rxjs';\r\nimport emailjs from 'emailjs-com';\r\nimport { environment } from '../../../environments/environment';\r\n\r\nexport interface ContactFormData {\r\n  name: string;\r\n  email: string;\r\n  subject: string;\r\n  message: string;\r\n}\r\n\r\nexport interface EmailResponse {\r\n  status: number;\r\n  text: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ContactService {\r\n  private readonly EMAIL_SERVICE_ID = environment.emailjs.serviceId;\r\n  private readonly EMAIL_TEMPLATE_ID = environment.emailjs.templateId;\r\n  private readonly EMAIL_PUBLIC_KEY = environment.emailjs.publicKey;\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.initializeEmailJS();\r\n  }\r\n\r\n  private initializeEmailJS(): void {\r\n    try {\r\n      emailjs.init(this.EMAIL_PUBLIC_KEY);\r\n      console.log('‚úÖ EmailJS initialized successfully');\r\n    } catch (error) {\r\n      console.error('‚ùå EmailJS initialization failed:', error);\r\n    }\r\n  }\r\n\r\n  async sendEmail(formData: ContactFormData): Promise<EmailResponse> {\r\n    try {\r\n      // ‚úÖ FIXED - Proper template parameters\r\n      const templateParams = {\r\n        from_name: formData.name,        // Visitor's name\r\n        from_email: formData.email,      // Visitor's email\r\n        subject: formData.subject,       // Message subject\r\n        message: formData.message,       // Message content\r\n        reply_to: formData.email,        // Reply-to address\r\n        to_email: 'shainyvpoojari@gmail.com',  // ‚úÖ YOUR email (where messages go)\r\n        to_name: 'Shainy V Poojari'     // ‚úÖ Your name\r\n      };\r\n\r\n      console.log('üìß Sending email with fixed template params:', templateParams);\r\n      console.log('üìß Service ID:', this.EMAIL_SERVICE_ID);\r\n      console.log('üìß Template ID:', this.EMAIL_TEMPLATE_ID);\r\n\r\n      const response = await emailjs.send(\r\n        this.EMAIL_SERVICE_ID,\r\n        this.EMAIL_TEMPLATE_ID,\r\n        templateParams,\r\n        this.EMAIL_PUBLIC_KEY\r\n      );\r\n\r\n      console.log('‚úÖ Email sent successfully:', response);\r\n      return response;\r\n\r\n    } catch (error: unknown) {\r\n      console.error('‚ùå EmailJS Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  sendEmailObservable(formData: ContactFormData): Observable<EmailResponse> {\r\n    return from(this.sendEmail(formData));\r\n  }\r\n\r\n  validateEmail(email: string): boolean {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n  }\r\n\r\n  getContactInfo() {\r\n    return {\r\n      name: 'Shainy V Poojari',\r\n      title: 'Senior Frontend Engineer',\r\n      email: 'shainyvpoojari@gmail.com',  // ‚úÖ FIXED typo\r\n      location: 'Bangalore, India',\r\n      responseTime: 'Within 24 hours'\r\n    };\r\n  }\r\n}\r\n"],"mappings":";AAEA,SAAqBA,IAAI,QAAQ,MAAM;AACvC,OAAOC,OAAO,MAAM,aAAa;AACjC,SAASC,WAAW,QAAQ,mCAAmC;;;AAiB/D,OAAM,MAAOC,cAAc;EAKzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJP,KAAAC,gBAAgB,GAAGJ,WAAW,CAACD,OAAO,CAACM,SAAS;IAChD,KAAAC,iBAAiB,GAAGN,WAAW,CAACD,OAAO,CAACQ,UAAU;IAClD,KAAAC,gBAAgB,GAAGR,WAAW,CAACD,OAAO,CAACU,SAAS;IAG/D,IAAI,CAACC,iBAAiB,EAAE;EAC1B;EAEQA,iBAAiBA,CAAA;IACvB,IAAI;MACFX,OAAO,CAACY,IAAI,CAAC,IAAI,CAACH,gBAAgB,CAAC;MACnCI,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;KAClD,CAAC,OAAOC,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;;EAE5D;EAEMC,SAASA,CAACC,QAAyB;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACvC,IAAI;QACF;QACA,MAAMC,cAAc,GAAG;UACrBC,SAAS,EAAEJ,QAAQ,CAACK,IAAI;UACxBC,UAAU,EAAEN,QAAQ,CAACO,KAAK;UAC1BC,OAAO,EAAER,QAAQ,CAACQ,OAAO;UACzBC,OAAO,EAAET,QAAQ,CAACS,OAAO;UACzBC,QAAQ,EAAEV,QAAQ,CAACO,KAAK;UACxBI,QAAQ,EAAE,0BAA0B;UACpCC,OAAO,EAAE,kBAAkB,CAAK;SACjC;;QAEDhB,OAAO,CAACC,GAAG,CAAC,8CAA8C,EAAEM,cAAc,CAAC;QAC3EP,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEI,KAAI,CAACb,gBAAgB,CAAC;QACpDQ,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEI,KAAI,CAACX,iBAAiB,CAAC;QAEtD,MAAMuB,QAAQ,SAAS9B,OAAO,CAAC+B,IAAI,CACjCb,KAAI,CAACb,gBAAgB,EACrBa,KAAI,CAACX,iBAAiB,EACtBa,cAAc,EACdF,KAAI,CAACT,gBAAgB,CACtB;QAEDI,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEgB,QAAQ,CAAC;QACnD,OAAOA,QAAQ;OAEhB,CAAC,OAAOf,KAAc,EAAE;QACvBF,OAAO,CAACE,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;QACxC,MAAMA,KAAK;;IACZ;EACH;EAEAiB,mBAAmBA,CAACf,QAAyB;IAC3C,OAAOlB,IAAI,CAAC,IAAI,CAACiB,SAAS,CAACC,QAAQ,CAAC,CAAC;EACvC;EAEAgB,aAAaA,CAACT,KAAa;IACzB,MAAMU,UAAU,GAAG,4BAA4B;IAC/C,OAAOA,UAAU,CAACC,IAAI,CAACX,KAAK,CAAC;EAC/B;EAEAY,cAAcA,CAAA;IACZ,OAAO;MACLd,IAAI,EAAE,kBAAkB;MACxBe,KAAK,EAAE,0BAA0B;MACjCb,KAAK,EAAE,0BAA0B;MACjCc,QAAQ,EAAE,kBAAkB;MAC5BC,YAAY,EAAE;KACf;EACH;;;uBApEWrC,cAAc,EAAAsC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAdzC,cAAc;MAAA0C,OAAA,EAAd1C,cAAc,CAAA2C,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}